# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- dev_ops
# pr:
# - main

resources:
- repo: self

variables:

  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: '2178989d-e8e0-4f60-8287-1330e4da89e7'
  imageRepository: 'notfightclubangular'
  containerRegistry: 'p3fightclub.azurecr.io'
  dockerfilePath: '**/Dockerfile'
  tag: '$(Build.BuildId)'
  imagePullSecret: 'p3fightclub19548027-auth'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'


stages:
- stage: Test
  displayName: Test stage
  jobs:
    - job: Test
      displayName: Test
      pool:
        vmImage: $(vmImageName)
      steps:
      - task: NodeTool@0
        displayName: Install Node.js
        inputs:
          versionSpec: '14.x'
          checkLatest: true
      - script: |
          npm install -g @angular/cli
          npm install
          ng build --prod
        displayName: 'npm install and build'
        workingDirectory: Angular
      - script: |
          cd Angular
          npm install puppeteer --save-dev
          npm install karma-junit-reporter --save-dev
          npm ci
          ng test --watch=false --karma-config karma.conf.ci.js --codeCoverage=true
        displayName: Install test dependencies and run tests
      - task: PublishTestResults@2
        displayName: Publish Test Results
        condition: succeededOrFailed()
        inputs:
          testResultsFormat: 'JUnit'
          testResultsFiles: '**/TESTS-*.xml'
      - task: PublishCodeCoverageResults@1
        displayName: Publish Code Coverage Results
        condition: succeededOrFailed()
        inputs:
          codeCoverageTool: 'Cobertura'
          summaryFileLocation: 'Angular/coverage/Angular/cobertura-coverage.xml'

- stage: Build
  displayName: Build stage
  dependsOn: Test
  condition: succeededOrFailed()
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)

    - upload: manifests
      artifact: manifests

# - stage: Deploy
#   displayName: Deploy stage
#   dependsOn: Build

#   jobs:
#   - deployment: Deploy
#     displayName: Deploy
#     pool:
#       vmImage: $(vmImageName)
#     environment: 'NotFightClubnotfightclubangular.default'
#     strategy:
#       runOnce:
#         deploy:
#           steps:
#           - task: KubernetesManifest@0
#             displayName: Create imagePullSecret
#             inputs:
#               action: createSecret
#               secretName: $(imagePullSecret)
#               dockerRegistryEndpoint: $(dockerRegistryServiceConnection)

#           - task: KubernetesManifest@0
#             displayName: Deploy to Kubernetes cluster
#             inputs:
#               action: deploy
#               manifests: |
#                 $(Pipeline.Workspace)/manifests/deployment.yml
#                 $(Pipeline.Workspace)/manifests/service.yml
#               imagePullSecrets: |
#                 $(imagePullSecret)
#               containers: |
#                 $(containerRegistry)/$(imageRepository):$(tag)
